;
; TclkEncode PIO program for Raspberry Pi Pico
; 
; This PIO program converts bits to timestamps for the TCLK protocol.
; It only handles the conversion from bits to timestamps, without performing
; any protocol-specific operations like adding start bits, parity bits, or trailer bits.
; Those operations are handled in the tclk.c file.
;
; Bit encoding logic:
; - Transition at each bit cell boundary
; - Additional transition at mid-cell if bit is 1, no transition if bit is 0
;
; The encoded timestamps are output for the tclkOUT program.
;

.program tclkEncode
.define PUBLIC BIT_CELL 50       ; Bit cell duration in nanoseconds (half of bit period)
.define PUBLIC BIT_PERIOD 100    ; Full bit period in nanoseconds

.wrap_target
    pull                         ; Pull a bit from FIFO
    mov x, osr                   ; Store bit in X
    
    ; Get current timestamp
    set y, 0                     ; Start with timestamp 0 (relative timing)
    
    ; Push timestamp for bit boundary transition
    push                         ; Push timestamp for bit boundary transition
    
    ; Check if bit is 0 or 1
    jmp !x, send_zero            ; If bit is 0, jump to send_zero
    
    ; Send a 1 bit (transition at bit boundary and mid-cell)
    ; We need to implement addition without the add instruction
    ; Strategy: Use MOV and SET to manipulate values
    
    ; First mid-cell transition (y + BIT_CELL)
    set x, BIT_CELL              ; Load BIT_CELL into X
    push                         ; Push timestamp for mid-cell transition
    
    ; Update y to y + BIT_CELL
    ; Since we can't directly add, we'll use a lookup approach
    ; We'll use y to determine which value to set
    ; This is a simplified approach - in a real implementation,
    ; you would need a more sophisticated method for larger values
    mov y, x                     ; y = BIT_CELL
    
    ; Second transition (y + BIT_CELL)
    push                         ; Push timestamp for next transition
    
    ; Update y to y + BIT_CELL (now y = 2*BIT_CELL = BIT_PERIOD)
    set y, BIT_PERIOD            ; y = BIT_PERIOD
    jmp next_bit
    
send_zero:
    ; Send a 0 bit (transition at bit boundary only)
    ; We need to implement addition without the add instruction
    
    ; Update y to y + BIT_PERIOD
    set y, BIT_PERIOD            ; Set y to BIT_PERIOD
    push                         ; Push timestamp for next bit boundary
    
next_bit:
    push                         ; Push timestamp for next bit boundary
.wrap

% c-sdk {
static inline void tclkEncode_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = tclkEncode_program_get_default_config(offset);
    
    // Configure the state machine
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // Join FIFOs to increase size
    
    // Load the configuration and start the program
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

// Function to send a single bit to be encoded as timestamps
static inline void tclkEncode_send_bit(PIO pio, uint sm, bool bit) {
    // Wait for space in the FIFO
    while (pio_sm_is_tx_fifo_full(pio, sm))
        tight_loop_contents();
    
    // Send the bit
    pio_sm_put(pio, sm, bit ? 1 : 0);
}

// Function to send multiple bits to be encoded as timestamps
static inline void tclkEncode_send_bits(PIO pio, uint sm, const bool* buffer, size_t length) {
    for (size_t i = 0; i < length; i++) {
        tclkEncode_send_bit(pio, sm, buffer[i]);
    }
}
%}
