;
; MdatIN PIO program for Raspberry Pi Pico
; 
; This PIO program captures the MDAT signal and outputs timestamps
; for rising and falling edges. MDAT is a 10 Mbit/s self-clocking signal.
;

.program mdatIN
.define PUBLIC EDGE_DEBOUNCE 5  ; Debounce time in cycles

.wrap_target
    ; Wait for a rising edge
    wait 1 pin 0              ; Wait for pin to go high
    
    ; Debounce the rising edge
    set x, EDGE_DEBOUNCE      ; Load debounce counter
debounce_rise:
    jmp pin, check_rise       ; If pin is still high, continue
    jmp wait_rise             ; If pin went low, it was noise, go back to waiting
check_rise:
    jmp x--, debounce_rise    ; Decrement counter and loop if not zero
    
    ; Valid rising edge detected, output timestamp
    mov isr, osr              ; Copy current timestamp to ISR
    push                      ; Push timestamp to FIFO
    
wait_fall:
    ; Wait for a falling edge
    wait 0 pin 0              ; Wait for pin to go low
    
    ; Debounce the falling edge
    set x, EDGE_DEBOUNCE      ; Load debounce counter
debounce_fall:
    jmp pin, wait_fall        ; If pin went high, it was noise, go back to waiting
    jmp x--, check_fall       ; Decrement counter and loop if not zero
check_fall:
    ; Valid falling edge detected, output timestamp
    mov isr, osr              ; Copy current timestamp to ISR
    push                      ; Push timestamp to FIFO
    
wait_rise:
    ; Continue with next edge
    ; No explicit jump needed due to .wrap
.wrap

% c-sdk {
static inline void mdatIN_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = mdatIN_program_get_default_config(offset);
    
    // Map the state machine's IN pin group to the specified pin
    sm_config_set_in_pins(&c, pin);
    sm_config_set_jmp_pin(&c, pin);
    
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    
    // Set the pin direction to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    
    // Configure the state machine
    sm_config_set_in_shift(&c, false, false, 32);  // No auto-shift
    sm_config_set_out_shift(&c, false, false, 32); // No auto-shift
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // Join FIFOs to increase size
    
    // Load the configuration and start the program
    pio_sm_init(pio, sm, offset, &c);
}
%}
