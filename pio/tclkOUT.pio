;
; TclkOUT PIO program for Raspberry Pi Pico
; 
; This PIO program generates an output clock signal with precise timing
; based on timestamps provided through a FIFO buffer.
;

.program tclkOUT
.define PUBLIC PIN_CLOCK_OUT 1    ; Output pin for clock signal
.define PUBLIC TIMESTAMP_RES 50   ; Timestamp resolution in nanoseconds
.define PUBLIC BIT_CELL 50        ; Bit cell duration in nanoseconds (half of bit period)
.define PUBLIC BIT_PERIOD 100     ; Full bit period in nanoseconds

; Initialize bit counter to track bit position within a byte
; This helps maintain alignment and prevent clock shifting
.wrap_target
    set pins, 0                  ; Initialize bit counter (0-11 for 12 bits in TCLK frame)
    
bit_loop:
    pull                         ; Pull timestamp from FIFO
    mov x, osr                   ; Store timestamp in X
    
    ; Wait until the specified timestamp
wait_loop:
    mov isr, x                   ; Copy timestamp to ISR for comparison
    mov y, pins                  ; Get current pin state for comparison
    mov x, isr                   ; Move timestamp back to x
    jmp x!=y, wait_loop          ; Compare with system time (pins is preloaded)
    
    ; Toggle the output pin
    set pins, 1                  ; Set the output pin high
    
    ; Increment bit counter
    mov x, pins                  ; Move pins to x
    jmp !x, check_bit_boundary   ; If pins is 0, this is a bit boundary
    
    ; This is a mid-cell transition (only happens for '1' bits)
    ; No need to increment bit counter here
    jmp pull_next
    
check_bit_boundary:
    ; This is a bit boundary transition
    ; Increment bit counter
    set pins, 0                  ; Reset bit position flag
    
pull_next:
    pull                         ; Pull next timestamp from FIFO
    mov x, osr                   ; Store timestamp in X
    
    ; Wait until the specified timestamp
wait_loop2:
    mov isr, x                   ; Copy timestamp to ISR for comparison
    mov y, pins                  ; Get current pin state for comparison
    mov x, isr                   ; Move timestamp back to x
    jmp x!=y, wait_loop2         ; Compare with system time
    
    ; Toggle the output pin
    set pins, 0                  ; Set the output pin low
    
    ; Check if we've completed a full TCLK frame (12 bits)
    ; If so, reset the bit counter
    set pins, 0                  ; Reset bit position flag for next bit
    jmp bit_loop                 ; Continue with next bit
.wrap

% c-sdk {
static inline void tclkOUT_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = tclkOUT_program_get_default_config(offset);
    
    // Set the output pin
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);  // Set as output
    sm_config_set_set_pins(&c, pin, 1);
    
    // Configure the state machine
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX); // Join FIFOs to increase size
    
    // Load the configuration and start the program
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

// Function to send a timestamp to the PIO for clock generation
static inline void tclkOUT_send_timestamp(PIO pio, uint sm, uint32_t timestamp) {
    // Wait for space in the FIFO
    while (pio_sm_is_tx_fifo_full(pio, sm))
        tight_loop_contents();
    
    // Send the timestamp
    pio_sm_put(pio, sm, timestamp);
}
%}
