;
; TclkDecode PIO program for Raspberry Pi Pico
; 
; This PIO program processes timestamps from tclkIN and converts them to bits.
; It only handles the conversion from timestamps to bits, without performing
; any protocol-specific operations like synchronization or parity checking.
; Those operations are handled in the tclk.c file.
;
; Bit detection logic:
; - Transition at each bit cell boundary
; - Additional transition at mid-cell if bit is 1, no transition if bit is 0
;

.program tclkDecode
.define PUBLIC BIT_CELL 50       ; Bit cell duration in nanoseconds (half of bit period)
.define PUBLIC BIT_PERIOD 100    ; Full bit period in nanoseconds
.define PUBLIC MID_CELL_MARGIN 25 ; Margin for detecting mid-cell transitions (Â±25ns)
.define BIT_CELL_MIN (BIT_CELL - MID_CELL_MARGIN)
.define BIT_CELL_MAX (BIT_CELL + MID_CELL_MARGIN)

.wrap_target
    ; Process timestamps and convert to bits
process_timestamps:
    pull                         ; Pull first timestamp from FIFO
    mov x, osr                   ; Store timestamp in X
    pull                         ; Pull second timestamp from FIFO
    mov y, osr                   ; Store timestamp in Y
    
    ; Calculate time difference
    mov isr, y                   ; Store y in ISR temporarily
    mov y, x                     ; Move x to y
    mov x, isr                   ; Move original y to x
    sub x, x, y                  ; Calculate time difference (x = x - y)
    
    ; Determine if this is a bit cell or bit boundary transition
    set y, BIT_CELL              ; Load BIT_CELL into Y
    jmp x!=y, check_bit_boundary ; If not close to BIT_CELL, check if it's a bit boundary
    
    ; This is a mid-cell transition, so bit is 1
    set x, 1                     ; Set bit value to 1
    jmp output_bit
    
check_bit_boundary:
    ; Check if this is a bit boundary
    set y, BIT_PERIOD            ; Load BIT_PERIOD into Y
    jmp x!=y, process_timestamps ; If not close to BIT_PERIOD, something's wrong, restart
    
    ; This is a bit boundary, so bit is 0
    set x, 0                     ; Set bit value to 0
    
output_bit:
    ; Output the bit (0 or 1)
    mov isr, x                   ; Move bit value to ISR
    push                         ; Push bit to output FIFO
    
    ; Continue processing timestamps
    jmp process_timestamps
.wrap

% c-sdk {
static inline void tclkDecode_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = tclkDecode_program_get_default_config(offset);
    
    // Configure the state machine
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX); // Join FIFOs to increase size
    
    // Load the configuration and start the program
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

// Function to read a decoded bit from the PIO FIFO
static inline bool tclkDecode_get_bit(PIO pio, uint sm, bool* bit) {
    // Check if there's data available
    if (pio_sm_is_rx_fifo_empty(pio, sm)) {
        return false;
    }
    
    // Read the bit
    uint32_t value = pio_sm_get(pio, sm);
    *bit = (value & 0x01) != 0;
    return true;
}

// Function to read multiple decoded bits into a buffer
static inline size_t tclkDecode_get_bits(PIO pio, uint sm, bool* buffer, size_t max_bits) {
    size_t bits_read = 0;
    
    while (bits_read < max_bits) {
        bool bit;
        if (!tclkDecode_get_bit(pio, sm, &bit)) {
            // No more data available
            break;
        }
        
        buffer[bits_read++] = bit;
    }
    
    return bits_read;
}
%}
