name: Build Pico Clock

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-buildx-
      
    - name: Build Docker container
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        load: true
        tags: pico-clock-builder:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    # This ugly bit is necessary if you don't want your cache to grow forever
    # until it hits GitHub's limit of 5GB.
    # Temp fix: https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
    - name: Build project
      run: |
        # Create a build directory to store artifacts
        mkdir -p build
        
        # Run the build script inside the Docker container
        # Mount the repository to /app/project to avoid overriding the Pico SDK
        docker run --rm \
          -v ${{ github.workspace }}:/app/project \
          -v ${{ github.workspace }}/build:/app/project/build \
          -w /app/project \
          -e PICO_SDK_PATH=/app/pico-sdk \
          pico-clock-builder:latest \
          /bin/bash -c "./scripts/build.sh"
